package com.training.jpa.hibernate.jpahibernatedemo.repository;

import static org.junit.Assert.*;

import java.util.List;
import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import org.springframework.test.context.junit4.SpringRunner;

import com.training.jpa.hibernate.jpahibernatedemo.JpaHibernateDemoApplication;
import com.training.jpa.hibernate.jpahibernatedemo.entity.Course;


@RunWith(SpringRunner.class)
@SpringBootTest(classes=JpaHibernateDemoApplication.class)
public class CourseTestSpringDataJpaRepository {

	@Autowired
	CourseSpringDataJPARepository courseRepository;
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Test
	public void course_isPresent() {
		//Optional will avoid null pointer exception
		Optional<Course> courseOptional = courseRepository.findById(1001L);
		assertTrue(courseOptional.isPresent());
		
		logger.info("Check course is available from isPresent==> {}",courseOptional.isPresent());
		
	}
	
	@Test
	public void course_isNotPresent() {
		//Optional will avoid null pointer exception
		Optional<Course> courseOptional = courseRepository.findById(2001L);
		assertFalse(courseOptional.isPresent());
		
		logger.info("Check course is available from isNotPresent==> {}",courseOptional.isPresent());
	}
	
	@Test
	public void add_update_course(){
		
		Course course = new Course("Microservice in 100 steps");
		courseRepository.save(course);
		logger.info("Retrive all course after added new course ===> {} ",courseRepository.findAll());
		
		course.setName("Microservice in 100 steps with Netflix api");
		courseRepository.save(course);
		logger.info("Retrive all course after updated course ===> {} ",courseRepository.findAll());

	
		logger.info("****** Total courses count ===> {} ",courseRepository.count());
	}
	

	@Test
	public void findAll(){
		List<Course> findAll = courseRepository.findAll();
		logger.info("All Courses Using Find All ==> {}",findAll);
		assertNotNull(findAll);
	}
	
	@Test
	public void sort(){
		Sort sort = new Sort(Sort.Direction.DESC, "name");
		List<Course> findAllUsingSortDESC = courseRepository.findAll(sort);
		logger.info("All Courses Using Sort - DESC ==> {}", findAllUsingSortDESC);
		
		Sort sortASC = new Sort(Sort.Direction.ASC, "name");
		List<Course> findAllUsingSortASC = courseRepository.findAll(sortASC);
		logger.info("All Courses Using Sort - DESC ==> {}", findAllUsingSortASC);
		
		Sort sortBYASCId = new Sort(Sort.Direction.ASC, "id");
		Sort sortASCandID = new Sort(Sort.Direction.ASC, "name").and(sortBYASCId);
		List<Course> findAllUsingSortASCandID = courseRepository.findAll(sortASCandID);
		logger.info("All Courses Using Sort and ID - ASC ==> {}", findAllUsingSortASCandID);
	}
	
	@Test
	public void Pagination(){
		
		PageRequest pageRequest = PageRequest.of(0, 2);
		Sort sort = new Sort(Sort.Direction.DESC, "name");
		Page<Course> firstPage = courseRepository.findAll(pageRequest);
		logger.info("First Page ==> {}", firstPage.getContent());
		
		Pageable secondPageable = firstPage.nextPageable();
		Page<Course> secondPage = courseRepository.findAll(secondPageable);
		logger.info("Second Page ==> {}", secondPage.getContent());
		
		
	}
	
	@Test void customMethodsOfRepository(){
		
		//List<Course> findByName(String name);
		logger.info("Find By Name ==> {}", courseRepository.findByName("Spring Boot in 50 steps"));
		
		//Course findByNameAndId(String name, Long id);
		logger.info("Find By Name and Id ==> {}", courseRepository.findByNameAndId("Microservice in 150 steps", 1003l)
		//int countByName(String name);
		
		//List<Course> findByNameOrderByIdDesc(String name);
		
		//void deleteByName(String name);
		
		//JPQL
		//@Query("Select c from Course c where name like '%100 steps'")
		//List<Course> courseWith100StepsJPQL();
		
		//Native Query
		//@Query("Select * From Course where name like '%100 steps'")
		//List<Course> courseWith100StepsNativeQuery();
		
		//NamedQuery
		//@Query(name="query_get_NameLike100_courses")
		//List<Course> courseWith100StepsNamedQuery();
		
		
	}

}
